{"ast":null,"code":"import _classCallCheck from \"/Users/danielbeach/Work/HPHB/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/danielbeach/Work/HPHB/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/danielbeach/Work/HPHB/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/danielbeach/Work/HPHB/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/danielbeach/Work/HPHB/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/danielbeach/Work/HPHB/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/danielbeach/Work/HPHB/client/src/App.js\";\nimport React, { Component } from 'react'; // import logo from './logo.svg';\n\nimport './App.css';\nimport Board from './components/board.js';\nimport Wizards from './components/wizards.js';\nimport HogwartsCards from './components/hogwartsCards.js';\nimport ChoiceModal from './components/choiceModal.js'; // import Logo from './components/logo';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n    _this.state = {\n      wizards: [],\n      modalActive: false,\n      cardChoiceCard: {},\n      board: {\n        villians: [],\n        eventDeck: [],\n        location: {\n          name: \"\",\n          villianCapacity: 0,\n          villianCurrent: 0,\n          locationNumber: 0,\n          family: \"\"\n        },\n        locationCount: 1,\n        locationLimit: 3\n      },\n      activePlayer: 0\n    };\n    _this.choiceHandler = _this.choiceHandler.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch('/board').then(function (res) {\n        return res.json();\n      }).then(function (board) {\n        return _this2.setState({\n          board: board\n        }, function () {\n          return console.log('The board state is ', board);\n        });\n      });\n    }\n  }, {\n    key: \"playCard\",\n    value: function playCard(card, actions) {\n      fetch('playcard', {\n        headers: {\n          'content-type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify({\n          cardUID: card.UID,\n          actions: actions\n        })\n      });\n      this.grabdetails();\n    }\n  }, {\n    key: \"grabdetails\",\n    value: function grabdetails() {\n      var _this3 = this;\n\n      fetch('/players').then(function (res) {\n        return res.json();\n      }).then(function (wizards) {\n        return _this3.setState({\n          wizards: wizards\n        }, function () {\n          return console.log(\"We've got the following wizards \", wizards);\n        });\n      });\n    }\n  }, {\n    key: \"makeChoice\",\n    value: function makeChoice(card) {\n      this.setModal(true);\n      this.setState({\n        cardChoiceCard: card\n      });\n    }\n  }, {\n    key: \"setModal\",\n    value: function setModal(state) {\n      this.setState({\n        modalActive: state\n      });\n    }\n  }, {\n    key: \"choiceHandler\",\n    value: function choiceHandler(card) {\n      if (typeof variable !== 'undefined') {\n        console.log(card);\n        var action = 0;\n\n        if (card.decisions.exists) {\n          this.makeChoice(card);\n        } else {\n          this.playCard(card, action);\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.grabdetails();\n    }\n  }, {\n    key: \"sendCardPurchase\",\n    value: function sendCardPurchase(card) {\n      fetch('buycard', {\n        headers: {\n          'content-type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify({\n          cardUID: card.UID\n        })\n      });\n      this.grabdetails();\n    }\n  }, {\n    key: \"alert\",\n    value: function alert() {\n      alertObj = \"<div className='delete-button' onClick={() => { if (window.confirm('Yo, dis too many dolla')) this.onCancel(item) }} />\";\n    }\n  }, {\n    key: \"buyCard\",\n    value: function buyCard(card) {\n      if (this.state.wizards[this.state.activePlayer].gold >= card.value) {\n        this.sendCardPurchase(card);\n      } else Alert('Card is too pricey boi');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"App-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \" HPHB\"), React.createElement(\"div\", {\n        className: \"game\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(Board, {\n        borad: this.state.board,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }), React.createElement(Wizards, {\n        playing: this.choiceHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }), React.createElement(HogwartsCards, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }), React.createElement(ChoiceModal, {\n        card: this.state.cardChoiceCard,\n        unModal: this.setModal,\n        play: this.choiceHandler.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), alertObj)));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/danielbeach/Work/HPHB/client/src/App.js"],"names":["React","Component","Board","Wizards","HogwartsCards","ChoiceModal","App","state","wizards","modalActive","cardChoiceCard","board","villians","eventDeck","location","name","villianCapacity","villianCurrent","locationNumber","family","locationCount","locationLimit","activePlayer","choiceHandler","bind","fetch","then","res","json","setState","console","log","card","actions","headers","method","body","JSON","stringify","cardUID","UID","grabdetails","setModal","variable","action","decisions","exists","makeChoice","playCard","alertObj","gold","value","sendCardPurchase","Alert"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Board from './components/board.js';\nimport Wizards from './components/wizards.js';\nimport HogwartsCards from './components/hogwartsCards.js';\nimport ChoiceModal from './components/choiceModal.js';\n// import Logo from './components/logo';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      wizards: [],\n      modalActive: false,\n      cardChoiceCard: {},\n      board: {\n        villians: [],\n        eventDeck: [],\n        location: {\n          name: \"\",\n          villianCapacity: 0,\n          villianCurrent: 0,\n          locationNumber: 0,\n          family: \"\"\n        },\n        locationCount: 1,\n        locationLimit: 3\n      },\n      activePlayer: 0\n    }\n    this.choiceHandler = this.choiceHandler.bind(this);\n  };\n  componentDidMount() {\n    fetch('/board')\n      .then(res => res.json())\n      .then(board => this.setState({ board }, () => console.log('The board state is ', board)));\n  }\n  playCard(card, actions) {\n    fetch('playcard', {\n      headers: {\n        'content-type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify({\n        cardUID: card.UID,\n        actions: actions\n      })\n    })\n    this.grabdetails()\n  }\n  grabdetails() {\n    fetch('/players')\n      .then(res => res.json())\n      .then(wizards => this.setState({ wizards }, () => console.log(\"We've got the following wizards \", wizards)));\n  }\n  makeChoice(card) {\n    this.setModal(true)\n    this.setState({ cardChoiceCard: card })\n  }\n  setModal(state) {\n    this.setState({ modalActive: state })\n  }\n  choiceHandler(card) {\n    if (typeof variable !== 'undefined') {\n      console.log(card);\n      var action = 0\n      if (card.decisions.exists) {\n        this.makeChoice(card)\n      } else { this.playCard(card, action) }\n    }\n  }\n  componentDidMount() {\n    this.grabdetails()\n  }\n  sendCardPurchase(card) {\n    fetch('buycard', {\n      headers: {\n        'content-type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify({\n        cardUID: card.UID\n      })\n    })\n    this.grabdetails()\n  }\n  alert() {\n    alertObj = \"<div className='delete-button' onClick={() => { if (window.confirm('Yo, dis too many dolla')) this.onCancel(item) }} />\"\n  }\n  buyCard(card) {\n    if (this.state.wizards[this.state.activePlayer].gold >= card.value) {\n      this.sendCardPurchase(card);\n    } else (Alert('Card is too pricey boi'))\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n          <h1 className=\"App-title\"> HPHB</h1>\n          <div className=\"game\">\n            <Board borad={this.state.board} />\n            <Wizards playing={this.choiceHandler} />\n            <HogwartsCards />\n            <ChoiceModal card={this.state.cardChoiceCard} unModal={this.setModal} play={this.choiceHandler.bind(this)} />\n            {alertObj}\n          </div>\n        </header>\n\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}