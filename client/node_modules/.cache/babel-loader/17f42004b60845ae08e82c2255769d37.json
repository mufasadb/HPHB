{"ast":null,"code":"import _classCallCheck from \"/Users/danielbeach/Work/HPHB/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/danielbeach/Work/HPHB/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/danielbeach/Work/HPHB/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/danielbeach/Work/HPHB/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/danielbeach/Work/HPHB/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/danielbeach/Work/HPHB/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/danielbeach/Work/HPHB/client/src/App.js\";\nimport React, { Component } from 'react'; // import logo from './logo.svg';\n\nimport './App.css';\nimport Board from './components/board.js';\nimport Wizards from './components/wizards.js';\nimport HogwartsCards from './components/hogwartsCards.js';\nimport ChoiceModal from './components/choiceModal.js'; // import Logo from './components/logo';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n    _this.state = {\n      wizards: [],\n      modalActive: false,\n      cardChoiceCard: {},\n      board: {\n        villians: [],\n        eventDeck: [],\n        location: {\n          name: \"\",\n          villianCapacity: 0,\n          villianCurrent: 0,\n          locationNumber: 0,\n          family: \"\"\n        },\n        locationCount: 1,\n        locationLimit: 3\n      },\n      activePlayer: 0,\n      alert: {\n        show: false,\n        text: \"\"\n      },\n      hogwartsCards: {\n        faceUpCards: [],\n        deckCount: 0,\n        faceDownCards: []\n      }\n    };\n    _this.choiceHandler = _this.choiceHandler.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.buyCard = _this.buyCard.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.grabdetails();\n    }\n  }, {\n    key: \"playCard\",\n    value: function playCard(card, actions) {\n      fetch('playcard', {\n        headers: {\n          'content-type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify({\n          cardUID: card.UID,\n          actions: actions\n        })\n      });\n    }\n  }, {\n    key: \"grabdetails\",\n    value: function grabdetails() {\n      var _this2 = this;\n\n      fetch('/players').then(function (res) {\n        return res.json();\n      }).then(function (wizards) {\n        return _this2.setState({\n          wizards: wizards\n        }, function () {\n          return console.log(\"We've got the following wizards \", wizards);\n        });\n      });\n      fetch('/board').then(function (res) {\n        return res.json();\n      }).then(function (board) {\n        return _this2.setState({\n          board: board\n        }, function () {\n          return console.log('The board state is ', board);\n        });\n      });\n      fetch('/hogwartsCards').then(function (res) {\n        return res.json();\n      }).then(function (hogwartsCards) {\n        return _this2.setState({\n          hogwartsCards: hogwartsCards\n        }, function () {\n          return console.log(\"hogwartsCards are \", hogwartsCards);\n        });\n      });\n    }\n  }, {\n    key: \"makeChoice\",\n    value: function makeChoice(card) {\n      this.setModal(true);\n      this.setState({\n        cardChoiceCard: card\n      });\n    }\n  }, {\n    key: \"setModal\",\n    value: function setModal(state) {\n      this.setState({\n        modalActive: state\n      });\n    }\n  }, {\n    key: \"choiceHandler\",\n    value: function choiceHandler(card) {\n      if (card.decisions) {\n        var action = 0;\n\n        if (card.decisions.exists) {\n          this.makeChoice(card);\n        } else {\n          this.playCard(card, action);\n        }\n      }\n    }\n  }, {\n    key: \"sendCardPurchase\",\n    value: function sendCardPurchase(card) {\n      fetch('buycard', {\n        headers: {\n          'content-type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify({\n          cardUID: card.UID\n        })\n      }).then(console.log('bout to grab')).then(this.grabdetails());\n    }\n  }, {\n    key: \"buyCard\",\n    value: function buyCard(card) {\n      if (this.state.wizards[this.state.activePlayer].gold >= card.value) {\n        this.sendCardPurchase(card);\n      } else {\n        console.log('not');\n        var newText = \"you can't buy \" + card.name + \" because you only have \" + this.state.wizards[this.state.activePlayer].gold;\n        this.setState({\n          alert: {\n            show: true,\n            text: newText\n          }\n        });\n      }\n    }\n  }, {\n    key: \"onCancel\",\n    value: function onCancel() {\n      this.setState({\n        alert: {\n          show: false,\n          text: \"\"\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var alertObj = \"\";\n\n      if (this.state.alert.show) {\n        alertObj = React.createElement(\"div\", {\n          className: \"delete-button\",\n          onClick: function onClick() {\n            if (window.confirm('Yo, dis too many dolla')) _this3.onCancel();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"App-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \" HPHB\"), React.createElement(\"div\", {\n        className: \"game\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(Board, {\n        board: this.state.board,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), React.createElement(Wizards, {\n        playing: this.choiceHandler,\n        wizards: this.state.wizards,\n        activePlayer: this.state.board.activePlayer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }), React.createElement(HogwartsCards, {\n        buyCard: this.buyCard,\n        hogwartsCards: this.state.hogwartsCards,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }), React.createElement(ChoiceModal, {\n        card: this.state.cardChoiceCard,\n        unModal: this.setModal,\n        play: this.choiceHandler.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }), alertObj)));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/danielbeach/Work/HPHB/client/src/App.js"],"names":["React","Component","Board","Wizards","HogwartsCards","ChoiceModal","App","state","wizards","modalActive","cardChoiceCard","board","villians","eventDeck","location","name","villianCapacity","villianCurrent","locationNumber","family","locationCount","locationLimit","activePlayer","alert","show","text","hogwartsCards","faceUpCards","deckCount","faceDownCards","choiceHandler","bind","buyCard","grabdetails","card","actions","fetch","headers","method","body","JSON","stringify","cardUID","UID","then","res","json","setState","console","log","setModal","decisions","action","exists","makeChoice","playCard","gold","value","sendCardPurchase","newText","alertObj","window","confirm","onCancel"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Board from './components/board.js';\nimport Wizards from './components/wizards.js';\nimport HogwartsCards from './components/hogwartsCards.js';\nimport ChoiceModal from './components/choiceModal.js';\n// import Logo from './components/logo';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      wizards: [],\n      modalActive: false,\n      cardChoiceCard: {},\n      board: {\n        villians: [],\n        eventDeck: [],\n        location: {\n          name: \"\",\n          villianCapacity: 0,\n          villianCurrent: 0,\n          locationNumber: 0,\n          family: \"\"\n        },\n        locationCount: 1,\n        locationLimit: 3\n      },\n      activePlayer: 0,\n      alert: {\n        show: false,\n        text: \"\"\n      },\n      hogwartsCards: {\n        faceUpCards: [],\n        deckCount: 0,\n        faceDownCards: []\n      }\n    }\n    this.choiceHandler = this.choiceHandler.bind(this);\n    this.buyCard = this.buyCard.bind(this);\n  };\n  componentDidMount() {\n    this.grabdetails()\n  }\n  playCard(card, actions) {\n    fetch('playcard', {\n      headers: {\n        'content-type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify({\n        cardUID: card.UID,\n        actions: actions\n      })\n    })\n  }\n  grabdetails() {\n    fetch('/players')\n      .then(res => res.json())\n      .then(wizards => this.setState({ wizards }, () => console.log(\"We've got the following wizards \", wizards)));\n    fetch('/board')\n      .then(res => res.json())\n      .then(board => this.setState({ board }, () => console.log('The board state is ', board)));\n    fetch('/hogwartsCards')\n      .then(res => res.json())\n      .then(hogwartsCards => this.setState({ hogwartsCards }, () => console.log(\"hogwartsCards are \", hogwartsCards)));\n  }\n  makeChoice(card) {\n    this.setModal(true)\n    this.setState({ cardChoiceCard: card })\n  }\n  setModal(state) {\n    this.setState({ modalActive: state })\n  }\n  choiceHandler(card) {\n    if (card.decisions) {\n      var action = 0\n      if (card.decisions.exists) {\n        this.makeChoice(card)\n      } else { this.playCard(card, action) }\n    } \n  }\n  sendCardPurchase(card) {\n    fetch('buycard', {\n      headers: {\n        'content-type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify({\n        cardUID: card.UID\n      })\n    })\n      .then(console.log('bout to grab'))\n      .then(this.grabdetails())\n  }\n\n  buyCard(card) {\n    if (this.state.wizards[this.state.activePlayer].gold >= card.value) {\n      this.sendCardPurchase(card);\n    } else {\n      console.log('not')\n      let newText = \"you can't buy \" + card.name + \" because you only have \" + this.state.wizards[this.state.activePlayer].gold\n      this.setState({\n        alert: {\n          show: true,\n          text: newText\n        }\n      })\n    }\n  }\n  onCancel() {\n    this.setState({\n      alert: {\n        show: false,\n        text: \"\"\n      }\n    })\n  }\n\n  render() {\n    let alertObj = \"\"\n    if (this.state.alert.show) {\n      alertObj = <div className='delete-button' onClick={() => { if (window.confirm('Yo, dis too many dolla')) this.onCancel() }} />\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n          <h1 className=\"App-title\"> HPHB</h1>\n          <div className=\"game\">\n            <Board board={this.state.board} />\n            <Wizards playing={this.choiceHandler} wizards={this.state.wizards} activePlayer={this.state.board.activePlayer} />\n            <HogwartsCards buyCard={this.buyCard} hogwartsCards={this.state.hogwartsCards} />\n            <ChoiceModal card={this.state.cardChoiceCard} unModal={this.setModal} play={this.choiceHandler.bind(this)} />\n            {alertObj}\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}